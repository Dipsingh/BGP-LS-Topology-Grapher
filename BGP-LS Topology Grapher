__author__ = 'dipsingh'

import urllib
import json
from pprint import  pprint
import re
import networkx as nx
import matplotlib.pyplot as plt
import itertools

def extract_routerid (str):
    unicode_strlist = str.split("&")
    strlist = [x.encode('UTF8') for x in unicode_strlist]
    rg = re.compile(".*(router).*",re.IGNORECASE|re.DOTALL)
    router_id_list = filter(rg.match , strlist)
    router_id_string = router_id_list[0]
    final_router_id_list = router_id_string.split("=")
    router_id = final_router_id_list[1]
    return router_id

def extract_isis_level(str):
    unicode_strlist = str.split("/")
    strlist = [x.encode('UTF8') for x in unicode_strlist ]
    rg = re.compile(".*(ISISLEVEL).*",re.IGNORECASE|re.DOTALL)
    isis_level_list = filter(rg.match , strlist)
    isis_level_string = isis_level_list[0]
    isis_level_list = isis_level_string.split(":")
    isis_level= isis_level_list[0]
    return isis_level

def draw_graph(graph,labels=None, graph_layout='spectral', node_size=1600, node_color='blue', node_alpha=0.3,node_text_size=12,edge_color='green', edge_alpha=0.3, edge_tickness=1,
               edge_text_pos=0.4,text_font='sans-serif'):

    nodes = set ([n1 for n1,n2 in graph]+[n2 for n1, n2 in graph]) # Do i need this
    G = nx.Graph()

    for node in nodes:
        G.add_node(node)

    for edge in graph:
        G.add_edge(edge[0],edge[1])

    if graph_layout == 'spring':
        graph_pos=nx.spring_layout(G)
    elif graph_layout == 'spectral':
        graph_pos=nx.spectral_layout(G)
    elif graph_layout == 'random':
        graph_pos=nx.random_layout(G)
    else:
        graph_pos=nx.shell_layout(G)

    nx.draw_networkx_nodes(G,graph_pos,node_size=node_size, alpha=node_alpha, node_color=node_color)
    nx.draw_networkx_edges(G,graph_pos,width=edge_tickness,alpha=edge_alpha,edge_color=edge_color)
    nx.draw_networkx_labels(G, graph_pos,font_size=node_text_size,font_family=text_font)


    edge_labels = labels
    print edge_labels
    nx.draw_networkx_edge_labels(G, graph_pos, edge_labels=edge_labels,label_pos=edge_text_pos)
    plt.show()

result = urllib.urlopen('http://admin:admin@172.16.2.128:8181/restconf/operational/network-topology:network-topology/')
r= json.load(result.fp)
result.close()


for n in r['network-topology']['topology'][2]['node']:
    if len(n['l3-unicast-igp-topology:igp-node-attributes']) == 0 :
        pass
    else:
        if (n['l3-unicast-igp-topology:igp-node-attributes'].has_key('prefix')) & (n['l3-unicast-igp-topology:igp-node-attributes'].has_key('name')):
            print "Node Name is  %s" % n['l3-unicast-igp-topology:igp-node-attributes']['name']
            print "Router ID is %s" % n['l3-unicast-igp-topology:igp-node-attributes']['router-id'][0]
            print "ISO System ID %s" % n['l3-unicast-igp-topology:igp-node-attributes']['isis-topology:isis-node-attributes']['iso']['iso-system-id']
            for p in n['l3-unicast-igp-topology:igp-node-attributes']['prefix']:
                print "Prefix is %s" % p['prefix']
                print "Metrix is %s" % p['metric']
        elif n['l3-unicast-igp-topology:igp-node-attributes'].has_key('name'):
            print  n['l3-unicast-igp-topology:igp-node-attributes']
            print "Node Name is test %s" % n['l3-unicast-igp-topology:igp-node-attributes']['name']
            print "Router ID is %s" % n['l3-unicast-igp-topology:igp-node-attributes']['router-id'][0]
            print "ISO System ID %s" % n['l3-unicast-igp-topology:igp-node-attributes']['isis-topology:isis-node-attributes']['iso']['iso-system-id']

node_list = []
igp_cost_dict = {}
for n in r['network-topology']['topology'][2]['link']:
    source_router_id = extract_routerid (n['source']['source-node'])
    print "Source Node ID is %s " % source_router_id
    destination_router_id = extract_routerid(n['destination']['dest-node'])
    print "Destination Node ID is %s " % destination_router_id
    igp_metric = n['l3-unicast-igp-topology:igp-link-attributes']['metric']
    print "IGP Metric between the Nodes is %d" %igp_metric
    isis_level = extract_isis_level(n['link-id'])
    print "ISIS Level is %s" % isis_level
    node_pair = (source_router_id,destination_router_id)
    node_list.append(node_pair)
    igp_cost = node_pair,igp_metric
    igp_cost_dict [node_pair] = igp_metric


print node_list

draw_graph(node_list,igp_cost_dict)
